// script.js
document.addEventListener('DOMContentLoaded', function() {
    const getWeatherButton = document.getElementById('get-weather');

    getWeatherButton.addEventListener('click', function() {
        const city = document.getElementById('city').value;
        const apiKey = '9d25421f1b894a7abb8225858240204'; // Replace with your WeatherAPI.com API key
        const url = `https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${city}`;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const weatherInfo = `
                    <p>Location: ${data.location.name}, ${data.location.region}, ${data.location.country}</p>
                    <p>Temperature: ${data.current.temp_c}°C</p>
                    <p>Weather: ${data.current.condition.text}</p>
                    <p>Humidity: ${data.current.humidity}%</p>
                    <p>Wind Speed: ${data.current.wind_kph} km/h</p>
                    <!-- Add more information here as needed -->
                `;
                document.getElementById('weather-info').innerHTML = weatherInfo;
            })
            .catch(error => {
                console.error('Error fetching weather data:', error);
            });
    });
});




option two


document.addEventListener('DOMContentLoaded', function() {
    const getWeatherButton = document.getElementById('get-weather');

    getWeatherButton.addEventListener('click', function() {
        const city = document.getElementById('city').value;
        const apiKey = '9d25421f1b894a7abb8225858240204'; // Replace with your WeatherAPI.com API key
        const url = `https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${city}`;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                // Constructing JSON object with weather information
                const weatherData = {
                    location: {
                        name: data.location.name,
                        region: data.location.region,
                        country: data.location.country,
                        lat: data.location.lat,
                        lon: data.location.lon,
                        tz_id: data.location.tz_id,
                        localtime: data.location.localtime
                    },
                    current: {
                        temp_c: data.current.temp_c,
                        temp_f: data.current.temp_f,
                        condition: {
                            text: data.current.condition.text,
                            icon: data.current.condition.icon
                        },
                        humidity: data.current.humidity,
                        wind_kph: data.current.wind_kph,
                        wind_mph: data.current.wind_mph,
                        wind_degree: data.current.wind_degree,
                        wind_dir: data.current.wind_dir,
                        pressure_mb: data.current.pressure_mb,
                        pressure_in: data.current.pressure_in,
                        precip_mm: data.current.precip_mm,
                        precip_in: data.current.precip_in,
                        feelslike_c: data.current.feelslike_c,
                        feelslike_f: data.current.feelslike_f,
                        uv: data.current.uv,
                        visibility_km: data.current.visibility_km,
                        visibility_miles: data.current.visibility_miles
                    }
                };

                // Convert JSON object to string for display
                const weatherInfo = JSON.stringify(weatherData, null, 2);

                // Displaying the JSON object
                document.getElementById('weather-info').innerText = weatherInfo;
            })
            .catch(error => {
                console.error('Error fetching weather data:', error);
            });
    });
});




document.addEventListener('DOMContentLoaded', function() {
    const getWeatherButton = document.getElementById('get-weather');

    getWeatherButton.addEventListener('click', function() {
        const city = document.getElementById('city').value;
        const apiKey = '9d25421f1b894a7abb8225858240204298498273'; // Replace with your WeatherAPI.com API key
        const url = `https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${city}`;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                // Convert JSON object to string for display
                const weatherInfo = JSON.stringify(data, null, 2);

                // Displaying the JSON object
                document.getElementById('weather-info').innerText = weatherInfo;

                // Save data to a JSON file
                saveJSONToFile(data);
            })
            .catch(error => {
                console.error('Error fetching weather data:', error);
            });
    });

    function saveJSONToFile(data) {
        const jsonData = JSON.stringify(data, null, 2);
        const blob = new Blob([jsonData], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'weather_data.json';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }
});
In this modified code:

We define a saveJSONToFile function that takes the retrieved weather data as input and saves it to a JSON file.
Inside the saveJSONToFile function, we convert the JSON data to a string using JSON.stringify.
We create a Blob object with the JSON string and set its MIME type to application/json.
We create a temporary URL for the Blob object using URL.createObjectURL.
We create an <a> element with a download attribute and set its href to the temporary URL.
We trigger a click event on the <a> element to initiate the download of the JSON file.
Finally, we clean up by removing the <a> element and revoking the temporary URL.
Now, when you click the "Get Weather" button, the weather information will be displayed on the webpage, and the data will also be saved to a JSON file named weather_data.json, which you can download.















---------------------------------------------------                            --------------------------------------------
document.addEventListener('DOMContentLoaded', function() {
    const getWeatherButton = document.getElementById('get-weather');

    getWeatherButton.addEventListener('click', function() {
        const city = document.getElementById('city').value;
        const apiKey = '9d25421f1b894a7abb8225858240204298498273'; // Replace with your WeatherAPI.com API key
        const url = `https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${city}`;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                const weatherInfoContainer = document.getElementById('weather-info');
                weatherInfoContainer.innerHTML = ''; // Clear previous content

                // Location information
                const locationInfo = document.createElement('div');
                locationInfo.classList.add('location-info'); // Add class for styling
                locationInfo.innerHTML = `
                    <h2>Location</h2>
                    <p>Name: ${data.location.name}</p>
                    <p>Region: ${data.location.region}</p>
                    <p>Country: ${data.location.country}</p>
                    <p>Latitude: ${data.location.lat}</p>
                    <p>Longitude: ${data.location.lon}</p>
                    <p>Timezone: ${data.location.tz_id}</p>
                    <p>Local Time: ${data.location.localtime}</p>
                `;
                weatherInfoContainer.appendChild(locationInfo);

                // Current weather information
                const currentWeatherInfo = document.createElement('div');
                currentWeatherInfo.classList.add('current-weather-info'); // Add class for styling
                currentWeatherInfo.innerHTML = `
                    <h2>Current Weather</h2>
                    <p>Last Updated: ${data.current.last_updated}</p>
                    <p>Temperature: ${data.current.temp_c}°C (${data.current.temp_f}°F)</p>
                    <p>Condition: ${data.current.condition.text}</p>
                    <img src="${data.current.condition.icon}" alt="Weather Icon">
                    <p>Wind Speed: ${data.current.wind_kph} km/h (${data.current.wind_mph} mph) ${data.current.wind_dir}</p>
                    <p>Pressure: ${data.current.pressure_mb} mb (${data.current.pressure_in} in)</p>
                    <p>Precipitation: ${data.current.precip_mm} mm (${data.current.precip_in} in)</p>
                    <p>Humidity: ${data.current.humidity}%</p>
                    <p>Cloud: ${data.current.cloud}</p>
                    <p>Feels Like: ${data.current.feelslike_c}°C (${data.current.feelslike_f}°F)</p>
                    <p>Visibility: ${data.current.vis_km} km (${data.current.vis_miles} miles)</p>
                    <p>UV Index: ${data.current.uv}</p>
                    <p>Gust Speed: ${data.current.gust_kph} km/h (${data.current.gust_mph} mph)</p>
                `;
                weatherInfoContainer.appendChild(currentWeatherInfo);
            })
            .catch(error => {
                console.error('Error fetching weather data:', error);
            });
    });
});


-------------------------------------------------------                                               -----------------------------------
document.addEventListener('DOMContentLoaded', function() {
    const getWeatherButton = document.getElementById('get-weather');

    getWeatherButton.addEventListener('click', function() {
        const city = document.getElementById('city').value;
        const apiKey = '9d25421f1b894a7abb8225858240204'; // Replace with your WeatherAPI.com API key
        const currentWeatherUrl = `https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${city}`;
        const forecastUrl = `https://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${city}&days=3`;
        const hourlyForecastUrl = `https://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${city}&hours=7`;

        fetch(currentWeatherUrl)
            .then(response => response.json())
            .then(data => {
                // Display current weather
                displayCurrentWeather(data);
            })
            .catch(error => {
                console.error('Error fetching current weather data:', error);
            });

        fetch(forecastUrl)
            .then(response => response.json())
            .then(data => {
                // Display forecast
                displayForecast(data);
            })
            .catch(error => {
                console.error('Error fetching forecast data:', error);
            });

        fetch(hourlyForecastUrl)
            .then(response => response.json())
            .then(data => {
                // Display Hourly forecast
                displayHourlyForecast(data);
            })
            .catch(error => {
                console.error('Error fetching hourly forecast data:', error);
            });
    });

    function displayCurrentWeather(data) {
        // Display current weather information
        const locationInfo = document.querySelector('.location-info');
        locationInfo.querySelector('.location-name').textContent = `Name: ${data.location.name}`;
        locationInfo.querySelector('.location-region').textContent = `Region: ${data.location.region}`;
        locationInfo.querySelector('.location-country').textContent = `Country: ${data.location.country}`;
        locationInfo.querySelector('.location-lat').textContent = `Latitude: ${data.location.lat}`;
        locationInfo.querySelector('.location-lon').textContent = `Longitude: ${data.location.lon}`;
        locationInfo.querySelector('.location-tz').textContent = `Timezone: ${data.location.tz_id}`;
        locationInfo.querySelector('.location-localtime').textContent = `Local Time: ${data.location.localtime}`;

        const currentWeatherInfo = document.querySelector('.current-weather-info');
        currentWeatherInfo.querySelector('.weather-updated .updated-time').textContent = data.current.last_updated;
        currentWeatherInfo.querySelector('.weather-temperature .temperature-c').textContent = `${data.current.temp_c}°C`;
        currentWeatherInfo.querySelector('.weather-temperature .temperature-f').textContent = `${data.current.temp_f}°F`;
        currentWeatherInfo.querySelector('.weather-condition .condition-text').textContent = data.current.condition.text;
        currentWeatherInfo.querySelector('.weather-icon').src = data.current.condition.icon;
        currentWeatherInfo.querySelector('.weather-wind .wind-speed-kph').textContent = `${data.current.wind_kph} km/h`;
        currentWeatherInfo.querySelector('.weather-wind .wind-speed-mph').textContent = `${data.current.wind_mph} mph`;
        currentWeatherInfo.querySelector('.weather-wind .wind-direction').textContent = data.current.wind_dir;
        currentWeatherInfo.querySelector('.weather-pressure .pressure-mb').textContent = `${data.current.pressure_mb} mb`;
        currentWeatherInfo.querySelector('.weather-pressure .pressure-in').textContent = `${data.current.pressure_in} in`;
        currentWeatherInfo.querySelector('.weather-precipitation .precipitation-mm').textContent = `${data.current.precip_mm} mm`;
        currentWeatherInfo.querySelector('.weather-precipitation .precipitation-in').textContent = `${data.current.precip_in} in`;
        currentWeatherInfo.querySelector('.weather-humidity .humidity').textContent = `${data.current.humidity}%`;
        currentWeatherInfo.querySelector('.weather-cloud .cloud').textContent = data.current.cloud;
        currentWeatherInfo.querySelector('.weather-feels-like .feels-like-c').textContent = `${data.current.feelslike_c}°C`;
        currentWeatherInfo.querySelector('.weather-feels-like .feels-like-f').textContent = `${data.current.feelslike_f}°F`;
        currentWeatherInfo.querySelector('.weather-visibility .visibility-km').textContent = `${data.current.vis_km} km`;
        currentWeatherInfo.querySelector('.weather-visibility .visibility-miles').textContent = `${data.current.vis_miles} miles`;
        currentWeatherInfo.querySelector('.weather-uv-index .uv-index').textContent = data.current.uv;
        currentWeatherInfo.querySelector('.weather-gust-speed .gust-speed-kph').textContent = `${data.current.gust_kph} km/h`;
        currentWeatherInfo.querySelector('.weather-gust-speed .gust-speed-mph').textContent = `${data.current.gust_mph} mph`;
    }

    function displayForecast(data) {
        const forecastContainer = document.querySelector('.forecast-container');
        forecastContainer.innerHTML = ''; // Clear previous forecast data

        data.forecast.forecastday.forEach(day => {
            const forecastItem = document.createElement('div');
            forecastItem.classList.add('forecast-item');

            const date = new Date(day.date);
            const dayOfWeek = date.toLocaleDateString('en-US', { weekday: 'long' });
            const dateText = date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });

            forecastItem.innerHTML = `
                <h3>${dayOfWeek}</h3>
                <p>${dateText}</p>
                <img src="${day.day.condition.icon}" alt="${day.day.condition.text}">
                <p>Max Temp: ${day.day.maxtemp_c}°C (${day.day.maxtemp_f}°F)</p>
                <p>Min Temp: ${day.day.mintemp_c}°C (${day.day.mintemp_f}°F)</p>
                <p>Condition: ${day.day.condition.text}</p>
            `;

            forecastContainer.appendChild(forecastItem);
        });
    }

    function displayHourlyForecast(data) {
        const hourlyContainer = document.querySelector('.hourly-container');
        hourlyContainer.innerHTML = ''; // Clear previous hourly forecast data

        data.forecast.forecastday[0].hour.forEach(hour => {
            const forecastItem = document.createElement('div');
            forecastItem.classList.add('hourly-item');

            const time = new Date(hour.time_epoch * 1000).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            const condition = hour.condition.text;
            const temperature = `${hour.temp_c}°C (${hour.temp_f}°F)`;

            forecastItem.innerHTML = `
                <p><strong>${time}</strong>: ${condition}, Temperature: ${temperature}</p>
            `;

            hourlyContainer.appendChild(forecastItem);
        });
    }
});



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather App</title>
    <link rel="stylesheet" href="index.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
</head>
<body>
    <div class="weather-app">
        <nav class="navbar">
            <input type="text" id="city" placeholder="E.g. London">
            <button id="get-weather"><span class="material-symbols-outlined">
                &#xe8b6
                </span>
            </button>
            <div class="temperature-toggle">
                <span id="celsius" class="active">°C</span>
                <span id="fahrenheit">°F</span>
            </div>     
            
            <div class="toggle">
                <span id="light-mode" class="active">Light</span>
                <span id="dark-mode">Dark</span>
            </div>
        </nav>
        

        <div class="weather-info">
            <!-- Weather information will be displayed here -->
            <div class="location-info">
                <h2 class="location-heading">Location</h2>
                <p class="location-name">Name: </p>
                <p class="location-region">Region: </p>
                <p class="location-country">Country: </p>
                <p class="location-lat">Latitude: </p>
                <p class="location-lon">Longitude: </p>
                <p class="location-tz">Timezone: </p>
                <p class="location-localtime">Local Time: </p>
            </div>
            <div class="current-weather-info">
                <h2 class="weather-heading">Current Weather</h2>
                <p class="weather-updated">Last Updated: <span class="updated-time"></span></p>
                <p class="weather-temperature">Temperature: <span class="temperature-c"></span>°C (<span class="temperature-f"></span>°F)</p>
                <p class="weather-condition">Condition: <span class="condition-text"></span></p>
                <img class="weather-icon" src="" alt="Weather Icon">
                <p class="weather-wind">Wind Speed: <span class="wind-speed-kph"></span> km/h (<span class="wind-speed-mph"></span> mph) <span class="wind-direction"></span></p>
                <p class="weather-pressure">Pressure: <span class="pressure-mb"></span> mb (<span class="pressure-in"></span> in)</p>
                <p class="weather-precipitation">Precipitation: <span class="precipitation-mm"></span> mm (<span class="precipitation-in"></span> in)</p>
                <p class="weather-humidity">Humidity: <span class="humidity"></span>%</p>
                <p class="weather-cloud">Cloud: <span class="cloud"></span></p>
                <p class="weather-feels-like">Feels Like: <span class="feels-like-c"></span>°C (<span class="feels-like-f"></span>°F)</p>
                <p class="weather-visibility">Visibility: <span class="visibility-km"></span> km (<span class="visibility-miles"></span> miles)</p>
                <p class="weather-uv-index">UV Index: <span class="uv-index"></span></p>
                <p class="weather-gust-speed">Gust Speed: <span class="gust-speed-kph"></span> km/h (<span class="gust-speed-mph"></span> mph)</p>
            </div>
            <div class="forecast-info">
                <!-- Forecast information will be displayed here -->
                <h2 class="forecast-heading">Forecast</h2>
                <div class="forecast-container">
                    <!-- Forecast data will be dynamically added here -->
                </div>

            <div class="hourly-weather-info">
                 <!-- Hourly weather information will be displayed here -->
                 <h2 class="hourly-heading">Hourly Weather</h2>
                <div class="hourly-container">
                   <!-- Hourly weather data will be dynamically added here -->
                </div>

            </div>
        </div>
    </div>

    <script src="script.js"></script>
</body>
</html>


--------------------------------------------------------------------------------------------------------------------------------
document.addEventListener('DOMContentLoaded', function() {
    const getWeatherButton = document.getElementById('get-weather');
    const celsiusToggle = document.getElementById('celsius');
    const fahrenheitToggle = document.getElementById('fahrenheit');
    let isCelsius = true; // Flag to track the current temperature unit

    // Function to toggle between Celsius and Fahrenheit
    function toggleTemperatureUnit() {
        isCelsius = !isCelsius; // Toggle the temperature unit flag
        getWeatherButton.click(); // Refresh weather data with updated temperature unit
    }

    celsiusToggle.addEventListener('click', toggleTemperatureUnit);
    fahrenheitToggle.addEventListener('click', toggleTemperatureUnit);

    getWeatherButton.addEventListener('click', function() {
        const city = document.getElementById('city').value;
        const apiKey = '9d25421f1b894a7abb8225858240204'; // Replace with your WeatherAPI.com API key
        const url = `https://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${city}&days=1&aqi=no&alerts=no`;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                // Update current weather information
                const todayWeatherInfo = document.querySelector('.today-weather-info');
                const currentWeather = data.current;
                const todayDate = new Date().toDateString();
                const temperature = isCelsius ? currentWeather.temp_c : currentWeather.temp_f;
                const temperatureUnit = isCelsius ? "°C" : "°F";

                todayWeatherInfo.querySelector('.hour-temperature').textContent = `Temperature: ${temperature}${temperatureUnit}`;
                todayWeatherInfo.querySelector('.hour-icon').src = currentWeather.condition.icon;
                todayWeatherInfo.querySelector('.location-name').textContent = data.location.name;
                todayWeatherInfo.querySelector('.location-region').textContent = data.location.region;
                todayWeatherInfo.querySelector('.location-country').textContent = data.location.country;
                todayWeatherInfo.querySelector('.date').textContent = todayDate;

                // Display current time
                let currentHour = new Date().getHours();
                if (currentHour === 23) {
                    currentHour = -1; // reset currentHour to -1 so it starts from 0 when incremented below
                }
                const currentTime = new Date().toLocaleTimeString();
                todayWeatherInfo.querySelector('.current-time').textContent = `Current Time: ${currentTime}`;

                // Update forecast information for the next 7 hours starting from the hour immediately following the current time
                const forecastContainer = document.querySelector('.nownext7hoursinfo');
                forecastContainer.innerHTML = ''; // Clear existing forecast data
                for (let i = currentHour + 1; i < currentHour + 8; i++) {
                    const hourData = data.forecast.forecastday[0].hour[i % 24]; // Ensure it wraps around the 24-hour clock
                    const hourElement = document.createElement('div');
                    hourElement.classList.add('hour-info');

                    // Display time for each hour
                    const hourTime = new Date(hourData.time_epoch * 1000).toLocaleTimeString();
                    hourElement.innerHTML = `
                        <div class="timeInformation">
                            <p class="placeHourDateTime">${hourTime}</p>
                            <img class="hour-icon" src="${hourData.condition.icon}" alt="Weather Icon">
                            <h5 class="hour-temperature">Temperature: ${isCelsius ? hourData.temp_c : hourData.temp_f}${temperatureUnit}</h5>
                        </div>
                    `;
                    forecastContainer.appendChild(hourElement);
                }
            })
            .catch(error => {
                console.error('Error fetching weather data:', error);
            });
    });

    // Update weather every 7 hours
    setInterval(() => {
        getWeatherButton.click();
    }, 1000 * 60 * 60 * 7); // 7 hours in milliseconds
});



-------------------------------------------------- almost Perfect ________________------------------------------------------
document.addEventListener('DOMContentLoaded', function() {
    const getWeatherButton = document.getElementById('get-weather');
    const celsiusToggle = document.getElementById('celsius');
    const fahrenheitToggle = document.getElementById('fahrenheit');
    let isCelsius = true; // Flag to track the current temperature unit

    // Function to toggle between Celsius and Fahrenheit
    function toggleTemperatureUnit() {
        if ((isCelsius && this === celsiusToggle) || (!isCelsius && this === fahrenheitToggle)) {
            return; // Return if the current temperature unit matches the clicked toggle
        }
        isCelsius = !isCelsius; // Toggle the temperature unit flag
        getWeatherButton.click(); // Refresh weather data with updated temperature unit
    }

    celsiusToggle.addEventListener('click', toggleTemperatureUnit);
    fahrenheitToggle.addEventListener('click', toggleTemperatureUnit);

    getWeatherButton.addEventListener('click', function() {
        const city = document.getElementById('city').value;
        const apiKey = '9d25421f1b894a7abb8225858240204'; // Replace with your WeatherAPI.com API key
        const url = `https://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${city}&days=1&aqi=no&alerts=no`;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                // Update current weather information
                const todayWeatherInfo = document.querySelector('.today-weather-info');
                const currentWeather = data.current;
                const todayDate = new Date().toDateString();
                const temperature = isCelsius ? currentWeather.temp_c : currentWeather.temp_f;
                const temperatureUnit = isCelsius ? "°C" : "°F";

                todayWeatherInfo.querySelector('.hour-temperature').textContent = `${temperature}${temperatureUnit}`;
                todayWeatherInfo.querySelector('.hour-icon').src = currentWeather.condition.icon;
                todayWeatherInfo.querySelector('.location-name').textContent = data.location.name + ',';
                todayWeatherInfo.querySelector('.location-region');
                if (data.location.region && data.location.region !== data.location.name) {
                    todayWeatherInfo.querySelector('.location-region').textContent = data.location.region + ',';
                } else {
                    todayWeatherInfo.querySelector('.location-region').hidden = true;
                }                
                todayWeatherInfo.querySelector('.location-country').textContent = data.location.country;
                todayWeatherInfo.querySelector('.date').textContent = todayDate;

                // Display current time based on the location timezone
                const timezone = data.location.tz_id;
                const currentTime = new Date().toLocaleTimeString('en-US', {timeZone: timezone});
                todayWeatherInfo.querySelector('.current-time').textContent = `Current Time: ${currentTime}`;

                // Function to calculate the hour offset for the forecast
                function calculateHourOffset(currentHour) {
                    const offset = (currentHour + 1) % 24; // Ensure it wraps around the 24-hour clock
                    return offset;
                }

                // Update forecast information for the next 7 hours starting from the hour immediately following the current time
                const forecastContainer = document.querySelector('.nownext7hoursinfo');
                forecastContainer.innerHTML = ''; // Clear existing forecast data

                // Add the current hour data (Now)
                const currentHourEpoch = data.location.localtime_epoch;
                const currentHourData = data.forecast.forecastday[0].hour.find(hourData => {
                    const hourEpoch = hourData.time_epoch;
                    return Math.abs(hourEpoch - currentHourEpoch) < 3600; // Check if the difference is within 1 hour (3600 seconds)
                });

                if (currentHourData) {
                    const currentHourTime = new Date(currentHourData.time_epoch * 1000).toLocaleTimeString('en-US', {timeZone: timezone});
                    const currentTemperature = isCelsius ? currentHourData.temp_c : currentHourData.temp_f;
                    const currentTemperatureUnit = isCelsius ? "°C" : "°F";
                    
                    const currentHourElement = document.createElement('div');
                    currentHourElement.classList.add('hour-info');
                    currentHourElement.innerHTML = `
                       <p class="placeHourDateTime">Now</p>
                        <div class="timeInformation">
                            <!-- <p class="placeHourDateTime">${currentHourTime}</p>  Display current time here -->
                            <img class="hour-icon" src="${currentHourData.condition.icon}" alt="Weather Icon">
                            <h5 class="hour-temperature">${currentTemperature}${currentTemperatureUnit}</h5>
                        </div>
                    `;
                    forecastContainer.appendChild(currentHourElement);
                }

                // Add forecast for the next 7 hours
                const currentTimeEpoch = data.location.localtime_epoch; // Local time provided by the API

                for (let i = 1; i <= 7; i++) {
                    const nextHourEpoch = currentTimeEpoch + i * 3600; // Increment by 3600 seconds (1 hour)
                    const nextHourData = data.forecast.forecastday[0].hour.find(hourData => {
                        return Math.abs(hourData.time_epoch - nextHourEpoch) < 3600; // Check if the difference is within 1 hour (3600 seconds)
                    });

                    if (nextHourData) {
                        const hourTime = new Date(nextHourData.time_epoch * 1000).toLocaleTimeString('en-US', {timeZone: timezone});
                        const hourElement = document.createElement('div');
                        hourElement.classList.add('hour-info');
                        hourElement.innerHTML = `
                            <p class="placeHourDateTime">${hourTime}</p>
                            <div class="timeInformation">
                                <img class="hour-icon" src="${nextHourData.condition.icon}" alt="Weather Icon">
                                <h5 class="hour-temperature">${isCelsius ? nextHourData.temp_c : nextHourData.temp_f}${temperatureUnit}</h5>
                            </div>
                        `;
                        forecastContainer.appendChild(hourElement);
                    }
                }

            })
            .catch(error => {
                console.error('Error fetching weather data:', error);
            });
    });

    // Update weather every 7 hours
    setInterval(() => {
        getWeatherButton.click();
    }, 1000 * 60 * 60 * 7); // 7 hours in milliseconds
});
